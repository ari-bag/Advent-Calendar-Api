{"version":3,"sources":["pages/SplashScreen.js","lib/QuestionProvider.js","pages/GameScreen.js","pages/EndScreen.js","App.js","index.js"],"names":["SplashScreen","className","to","React","createContext","Consumer","Provider","QuestionConsumer","WrappedComponent","props","valueFromProvider","questions","oneQuestion","answeredQuestions","points","style","isAnswered","showButton","getAllQuestions","getRandomQuestion","morePoints","isCorrect","nextQuestion","restartGame","QuestionProvider","state","axios","get","process","then","response","setState","data","catch","err","console","log","randomQuestion","Math","floor","random","length","i","isThere","some","question","_id","newAnswered","push","updatedPoints","index","updateStyle","correctAnswer","this","value","children","Component","actualNumber","totalNumber","src","picture","alt","answers","map","answer","key","onClick","App","exact","path","component","GameScreen","EndScreen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.676e514d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function SplashScreen() {\n  return (\n    <div className='splash-screen'>\n      <h1>A <span className='dnd'>D&D</span> 5ed QUIZ</h1>\n      <p>\n        Adventurer, test your knowledge in this game plenty of misterious\n        questions and reveal your destiny\n      </p>\n      <Link className='start-btn' to={\"/game\"}>Start Game</Link>\n    </div>\n  );\n}\n","import React from 'react';\nimport axios from 'axios';\n\nconst {Consumer, Provider} = React.createContext();\n\n\nfunction QuestionConsumer(WrappedComponent) {\n    return function (props) {\n        return (\n            <Consumer>\n                {(valueFromProvider) => (\n                    <WrappedComponent\n                        {...props}\n                        questions={valueFromProvider.questions}\n                        oneQuestion={valueFromProvider.oneQuestion}\n                        answeredQuestions={valueFromProvider.answeredQuestions}\n                        points={valueFromProvider.points}\n                        style={valueFromProvider.style}\n                        isAnswered={valueFromProvider.isAnswered}\n                        showButton={valueFromProvider.showButton}\n                        getAllQuestions={valueFromProvider.getAllQuestions}\n                        getRandomQuestion={valueFromProvider.getRandomQuestion}\n                        morePoints={valueFromProvider.morePoints}\n                        isCorrect={valueFromProvider.isCorrect}\n                        nextQuestion={valueFromProvider.nextQuestion}\n                        restartGame={valueFromProvider.restartGame}\n                    />\n                )}\n            </Consumer>\n        )\n    }\n}\n\nclass QuestionProvider extends React.Component {\n\n    state = {\n        questions: [],\n        oneQuestion: {},\n        answeredQuestions:[],\n        points: 0,\n        style: ['answer', 'answer', 'answer'],\n        isAnswered: false,\n        showButton: false\n    }\n\n    getAllQuestions = () => {\n        axios\n        .get(process.env.REACT_APP_API_URL + '/api')\n        .then((response) => {\n            this.setState({questions: response.data});\n            this.getRandomQuestion()\n        })\n        .catch((err) => console.log(err))\n    };\n\n    getRandomQuestion = () => {\n        const {questions, answeredQuestions} = this.state;\n        const randomQuestion = questions[Math.floor(Math.random()*questions.length)];\n        for (let i = 0; i<questions.length; i++) {\n\n            let someQuestion = (question) => question._id === randomQuestion._id;\n            let isThere = answeredQuestions.some(someQuestion);\n\n            if(answeredQuestions.length === 0 || !isThere) {\n               const newAnswered = [...answeredQuestions];\n               newAnswered.push(randomQuestion);\n               this.setState({oneQuestion:randomQuestion, answeredQuestions:newAnswered});\n               break; \n            }\n            else {\n                return this.getRandomQuestion();\n            }\n        }\n    }\n    \n    morePoints = () => {\n        const {oneQuestion, points} = this.state;\n        let updatedPoints = points;\n        updatedPoints += oneQuestion.points\n        this.setState({points: updatedPoints})\n    }\n\n    isCorrect = (index) => {\n        const {style, isAnswered, oneQuestion, showButton} = this.state;\n\n        if(!isAnswered) {\n           const updateStyle = style\n            if (index === oneQuestion.correctAnswer) {\n                updateStyle[index] += ' ' + 'correct';\n                this.morePoints()\n            }\n            else {\n                updateStyle[index] += ' ' + 'incorrect';\n            } \n            this.setState({isAnswered:!isAnswered, style:updateStyle, showButton:!showButton})\n        }\n    }\n\n    nextQuestion = () => {\n        const {isAnswered, showButton} = this.state;\n        const resetStyle = ['answer', 'answer', 'answer'];\n        this.setState({\n            isAnswered:!isAnswered, \n            showButton:!showButton,\n            style: resetStyle\n        });\n        this.getRandomQuestion()\n    }\n\n    restartGame = () => {\n        const resetStyle = ['answer', 'answer', 'answer'];\n        this.setState({\n            questions: [],\n            oneQuestion: {},\n            answeredQuestions:[],\n            points: 0,\n            style: resetStyle,\n            isAnswered: false,\n            showButton: false\n        });\n    }\n\n    render() {\n\n        const {\n            questions, \n            oneQuestion, \n            answeredQuestions, \n            points, \n            style, \n            isAnswered,\n            showButton\n        } = this.state;\n\n        const {\n            getAllQuestions, \n            getRandomQuestion, \n            morePoints, \n            isCorrect, \n            nextQuestion,\n            restartGame\n        } = this;\n\n        return (\n            <Provider value={{\n                questions, \n                oneQuestion, \n                answeredQuestions, \n                points, \n                style, \n                isAnswered, \n                showButton, \n                getAllQuestions, \n                getRandomQuestion, \n                morePoints, \n                isCorrect, \n                nextQuestion,\n                restartGame\n                }}>\n                {this.props.children}\n            </Provider>\n        )\n    }\n}\n\nexport  {QuestionProvider, QuestionConsumer}\n","import React, { Component } from 'react'\nimport {QuestionConsumer} from './../lib/QuestionProvider'\nimport {Link} from 'react-router-dom'\n\n\nclass GameScreen extends Component {\n    \n    componentDidMount() {\n        this.props.getAllQuestions()\n    }\n\n    render() {\n        const {\n            oneQuestion, \n            questions, \n            answeredQuestions, \n            points, \n            style,\n            showButton\n        } = this.props;\n\n        let actualNumber = answeredQuestions.length;\n        const totalNumber = questions.length;\n\n        return (\n            <div className='question-container'>\n               \n                <div className='red-container'>\n                    <div className='points'>\n                        <p>Points: {points}</p>\n                    </div>\n                    <div className='white-container'>\n                       <p className='number-question'>Question {actualNumber} / {totalNumber}</p>\n                       <p className='theQuestion'>{oneQuestion.question}</p>\n                       <img src={oneQuestion.picture} alt=\"Random gif that makes you laugh\"/> \n                    </div>\n                    \n                </div>\n                <div className='answers-container'>\n                    <div className='p-container'>\n                        <p>Select the correct answer</p>\n                    </div>\n                    <div className='answer-part'>\n                        <div className='center-answer'>\n                            <ol>\n                                {oneQuestion.question && oneQuestion.answers.map((answer, index) => {\n                                return (\n                                        <li key={index}>\n                                            <button onClick={() => this.props.isCorrect(index)} className={style[index]}>{answer}</button>\n                                        </li>\n                                )})}  \n                            </ol>\n                            {\n                            showButton ? \n                            <div className='next-btn'>\n                                {actualNumber === totalNumber ?\n                                    <Link to={'/end'} className='finish'>Finish quiz!</Link>\n                                : \n                                    <button onClick={this.props.nextQuestion}>➡</button>\n\n                                }\n                            </div> \n                            : \n                            null\n                        } \n                        </div>\n                    </div>\n                    \n                    \n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default QuestionConsumer(GameScreen)\n","import React, { Component } from 'react'\nimport {Link} from 'react-router-dom'\n\n\nimport {QuestionConsumer} from './../lib/QuestionProvider'\n\n\nclass EndScreen extends Component {\n    render() {\n        const {points, restartGame} = this.props\n        \n        const showThis = () => {\n            if (points <= 50) {\n                return (\n                    <div>\n                       <img \n                            src='https://res.cloudinary.com/dywatr6gy/image/upload/v1592212060/DnD/26488B41-010D-4A17-A093-D10C4ECC62B4_ryyifk.png'\n                            alt='An npc face' \n                            className='image-type'\n                        />\n                        <h3 className='type'>You are an NPC!</h3> \n                        <p className='funny-text'>Hey! At least you exist.</p>\n                    </div>\n                )\n            }\n            else if (points > 50 && points <= 100) {\n                return (\n                    <div>\n                       <img \n                            src='https://res.cloudinary.com/dywatr6gy/image/upload/v1592213918/DnD/9ece767ba78291f07e1921dca469a0de_orpo6s.jpg'\n                            alt='Female and male adventurer' \n                            className='image-type'\n                        />\n                        <h3 className='type'>You are an adventurer!</h3> \n                        <p className='funny-text'>You started a journey full of surprises and perils. Only destiny knows what you will encounter.</p>\n                    </div>\n                )\n            }\n            else if (points > 100 && points <= 150) {\n                return (\n                    <div>\n                       <img \n                            src='https://res.cloudinary.com/dywatr6gy/image/upload/v1592213920/DnD/2a29bf496a26823dd910500ac476019e_ytnl2b.jpg'\n                            alt='Old mage' \n                            className='image-type'\n                        />\n                        <h3 className='type'>You are a wielder of knowledge!</h3> \n                        <p className='funny-text'>You surpassed a lot of perils and forged a name. Bards sing your adventures.</p>\n                    </div>\n                )\n            }\n            else if (points > 150) {\n                return (\n                    <div>\n                       <img \n                            src='https://res.cloudinary.com/dywatr6gy/image/upload/v1592213921/DnD/e1962e90f6814bda054e8c0888aee6e7_slbdwf.jpg'\n                            alt='Game Master' \n                            className='image-type'\n                        />\n                        <h3 className='type'>Are you a DM?</h3> \n                        <p className='funny-text'>I'm impress! Only people with this knowledge can be a DM. Continue sharing your stories with everyone.</p>\n                    </div>\n                )\n            }\n        }\n\n        return (\n            <div className='end-container'>\n                <div className='endScreen'>\n                    <p className='final-score'>Your score: {points}</p>\n                    {showThis()}\n                    <Link onClick={() => restartGame()} className='try-btn' to={'/'}>Try again?</Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default QuestionConsumer(EndScreen)\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport SplashScreen from \"./pages/SplashScreen\";\nimport GameScreen from './pages/GameScreen'\nimport EndScreen from './pages/EndScreen'\n\nfunction App() {\n  return (\n    <div className='main'>\n      <Switch>\n        <Route exact path=\"/\" component={SplashScreen} />\n        <Route path=\"/game\" component={GameScreen}/>\n        <Route path=\"/end\" component={EndScreen}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nimport {QuestionProvider} from './lib/QuestionProvider';\n\nReactDOM.render(\n  <Router>\n    <QuestionProvider>\n      <App />\n    </QuestionProvider>\n  </Router>\n  ,document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}